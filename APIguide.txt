/users  routes

FYI ":" indicates something you put in, like a user's id ":id"
Some arrays when returned will be empty

GET /name/:name 
	Searches for users by name in the database
		return json of users {users:[{}]}
		if not successful, returns {status:failure}
	
GET /username/:username  
	Used for logging in and finding if a user exists,then if they do, it fin	ds info about all of their sessions, and the sessions that are related t	o their classes occuring in the next 24 hours 
		returns json {user:{},newSessions:[{}],joinedSessions[{}]}
		if the user is not found, returns {status:failure}

GET /id/:id
	Will return a specific user
		return json {user:{}}
		else {status:failure}

GET /buddies/:id
	Finds info for each buddy of the user passed to the server
		returns json {buddies:[{}]}
		if error, returns {status:failure} 
		may return empty if user has no buddies

POST /newuser
	Will take any user and throw it in the database so it must be
	formatted specifically for the db
	Pass in a user of the form: 
	{
		name: String,
		username: String,
		courses: Array of Strings,
		major: String,
		buddies: [],
		sessions: []
	}
	Leave the last two fields as empty arrays
	returns json {status:failure/success}

PUT /updatefriends/:id/:id2
	Uses the id of the two to become friends to add them to each other's
	buddy list.  Only use this method after the second person has accepted
	the request	
		returns json {status:failure/success}

PUT /deletecourses/:id
	Deletes the courses from the array passed to the server from the
	course list of the given user
	Pass the courses in a json object like:
	{
		courses : ["COMS 309, ...]
	}
		returns json {status:failure/success}

PUT /addcourses/:id
	Adds courses from the given array to the user object.  Does not
	overwrite the current array 
	Pass the courses in the form of a json object:
	{
		courses : ["COMS 309, ...]
	}
		returns json {status:failure/success}

PUT /setcourses/:id
	More useful and quicker than the last method. Replaces the old courses
	with the new array of courses
	Pass the courses in the form of a json object:
	{
		courses : ["COMS 309, ...]
	}
		returns json {status:failure/success}

PUT /setmajor/:id/:major
	Sets the major of the person from the params.  Now that I'm thinking
	about it, I have doubts about this method, but I think it has worked
		returns json {status:failure/success}

PUT /unjoinsession/:id/:sessionid
	Removes the person from the attendance list of the session and the
	session from the joinedSession of the user
		returns json {status:failure/success}

PUT /joinsession/:id/:sessionid
	Adds the person to the sessions attendance and the session to the list
	joined session of the user
		returns json {status:failure/success}



/sessions



GET /id/:id
	Finds the session with the given id
		returns json {session : {}}
		else returns {status : failure}

GET /:course/:startTime/:endTime
	Filters the sessions by courses, end times, and/or start times. If any
	parameter is not used, place a 0 in it's spot. The course should have
	no space in it.  
		returns json {sessions : [{}]}
		may be empty or returns {status:failure}

POST /newsession
	Will indiscriminately take the given session and put it into the
	database, so it must be formatted correctly. Times are in milliseconds
	and include the date.  Leave attendees and messages as an empty array 
	Pass it in the form of:
	{
		title : String,
		startTime : Number,
		endTime : Number,
		attendees : [],
		messages : [],
		course : String
	}
		returns json {status:failure/success}




